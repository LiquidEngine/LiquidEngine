#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D uGlobalTextures[];
layout(set = 0, binding = 1) writeonly uniform image2D uGlobalImages[];

layout(push_constant) uniform DrawParameters { uvec4 textures; };

vec3 sampleSource(float x, float y) {
  return texture(uGlobalTextures[textures.x], vec2(x, y)).rgb;
}

void main() {
  vec2 srcSize = vec2(imageSize(uGlobalImages[textures.x]));
  vec2 texel = 1.0 / srcSize;

  vec2 srcUV = (vec2(gl_GlobalInvocationID.xy) + 0.5) * texel * 0.5;

  ivec2 dstUV = ivec2(gl_GlobalInvocationID.xy);

  float aspectRatio = srcSize.x / srcSize.y;

  const float RadiusConstant = 0.01;
  vec2 radius = vec2(RadiusConstant, RadiusConstant * aspectRatio);

  vec3 a = sampleSource(srcUV.x - radius.x, srcUV.y + radius.y);
  vec3 b = sampleSource(srcUV.x, srcUV.y + radius.x);
  vec3 c = sampleSource(srcUV.x + radius.x, srcUV.y + radius.y);

  vec3 d = sampleSource(srcUV.x - radius.x, srcUV.y);
  vec3 e = sampleSource(srcUV.x, srcUV.y);
  vec3 f = sampleSource(srcUV.x + radius.x, srcUV.y);

  vec3 g = sampleSource(srcUV.x - radius.x, srcUV.y - radius.y);
  vec3 h = sampleSource(srcUV.x, srcUV.y - radius.y);
  vec3 i = sampleSource(srcUV.x + radius.x, srcUV.y - radius.y);

  vec3 color = e * 0.25 + (b + d + f + h) * 0.125 + (a + c + g + i) * 0.0625;

  imageStore(uGlobalImages[textures.y], dstUV, vec4(color, 1.0));
}
