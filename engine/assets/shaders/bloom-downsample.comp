#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : require

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform texture2D uGlobalTextures[];
layout(set = 0, binding = 1) uniform sampler uGlobalSamplers[];
layout(set = 0, binding = 2) writeonly uniform image2D uGlobalImages[];

layout(push_constant) uniform DrawParameters { uvec4 textures; };

vec3 sampleSource(float x, float y) {
  return texture(sampler2D(uGlobalTextures[textures.x],
                           uGlobalSamplers[textures.z]),
                 vec2(x, y))
      .rgb;
}

vec3 pow3(vec3 v, float p) {
  return vec3(pow(v.x, p), pow(v.y, p), pow(v.z, p));
}

vec3 linearToSrgb(vec3 v) { return pow3(v, 1.0 / 2.2); }

float karisAverage(vec3 col) {
  float luma = dot(linearToSrgb(col), vec3(0.2126f, 0.7152f, 0.0722f)) * 0.25;
  return 1.0 / (1.0 + luma);
}

void main() {
  ivec2 dstSize = imageSize(uGlobalImages[textures.y]);
  ivec2 dstUV = ivec2(gl_GlobalInvocationID.xy);

  vec2 texel = 1.0 / vec2(imageSize(uGlobalImages[textures.x]));
  vec2 texel2 = 2.0 * texel;

  vec2 srcUV = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5)) * 2.0 * texel;

  vec3 a = sampleSource(srcUV.x - texel2.x, srcUV.y + texel2.y);
  vec3 b = sampleSource(srcUV.x, srcUV.y + texel2.y);
  vec3 c = sampleSource(srcUV.x + texel2.x, srcUV.y + texel2.y);

  vec3 d = sampleSource(srcUV.x - texel2.x, srcUV.y);
  vec3 e = sampleSource(srcUV.x, srcUV.y);
  vec3 f = sampleSource(srcUV.x + texel2.x, srcUV.y);

  vec3 g = sampleSource(srcUV.x - texel2.x, srcUV.y - texel2.y);
  vec3 h = sampleSource(srcUV.x, srcUV.y - texel2.y);
  vec3 i = sampleSource(srcUV.x + texel2.x, srcUV.y - texel2.y);

  vec3 j = sampleSource(srcUV.x - texel.x, srcUV.y + texel.y);
  vec3 k = sampleSource(srcUV.x + texel.x, srcUV.y + texel.y);
  vec3 l = sampleSource(srcUV.x - texel.x, srcUV.y - texel.y);
  vec3 m = sampleSource(srcUV.x + texel.x, srcUV.y - texel.y);

  vec3 color = vec3(0.0);

  if (textures.w == 0) {
    vec3 c0 = (a + b + d + e) * (0.125 / 4.0);
    vec3 c1 = (b + c + e + f) * (0.125 / 4.0);
    vec3 c2 = (d + e + g + h) * (0.125 / 4.0);
    vec3 c3 = (e + f + h + i) * (0.125 / 4.0);
    vec3 c4 = (j + k + l + m) * (0.5 / 4.0);
    c0 *= karisAverage(c0);
    c1 *= karisAverage(c1);
    c2 *= karisAverage(c2);
    c3 *= karisAverage(c3);
    c4 *= karisAverage(c4);
    color = c0 + c1 + c2 + c3 + c4;
  } else {
    color = (a + c + g + i) * 0.03125;
    color += (b + d + f + h) * 0.0625;
    color += (e + j + k + l + m) * 0.125;
  }

  imageStore(uGlobalImages[textures.y], dstUV, vec4(color, 1.0));
}
