#version 450
#extension GL_ARB_separate_shader_objects : enable

#include "../../../engine/assets/shaders/generate-ibl.glsl"

layout(set = 0, binding = 0) uniform samplerCube uInputTexture;
layout(set = 0, binding = 1,
       rgba16f) writeonly uniform imageCube uOutputTexture;

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

const uint NumSamples = 4096;

void main() {
  ivec3 globalId = ivec3(gl_GlobalInvocationID);
  float width = imageSize(uOutputTexture).x;
  vec3 normal = cubeCoordToWorld(globalId, width);

  vec3 irradiance = vec3(0.0);
  for (uint i = 0; i < NumSamples; ++i) {
    vec2 u = sampleHammersley(i, NumSamples);
    vec3 H = importanceSampleGGX(u, normal, 1.0);

    float NdotH = sqrt(1.0 - u.y);
    float pdf = NdotH / Pi;

    float lod = 0.5 * log2(6.0 * width * width / (float(NumSamples) * pdf));

    irradiance += textureLod(uInputTexture, H, lod).rgb * NdotH;
  }

  irradiance /= float(NumSamples);

  imageStore(uOutputTexture, globalId, vec4(irradiance, 1.0));
}
