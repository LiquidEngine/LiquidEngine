#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_debug_printf : enable

#include "generate-ibl.glsl"

layout(set = 0, binding = 0) uniform samplerCube uInputTexture;
layout(set = 0, binding = 1,
       rgba16f) writeonly uniform imageCube uOutputTexture;

layout(push_constant) uniform PushConstants { vec4 data; }
pcMipParams;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

const uint NumSamples = 4096;

void main() {
  ivec3 globalId = ivec3(gl_GlobalInvocationID.xyz);

  float roughness = pcMipParams.data.x;
  float mipLevel = pcMipParams.data.y;
  float mipWidth = pcMipParams.data.z;

  vec3 normal = cubeCoordToWorld(globalId, mipWidth);

  if (globalId.x >= mipWidth || globalId.y >= mipWidth) {
    return;
  }

  if (roughness == 0.0) {
    imageStore(uOutputTexture, ivec3(gl_GlobalInvocationID),
               textureLod(uInputTexture, normal, 0));
    return;
  }

  float alpha = roughness * roughness;

  vec3 specular = vec3(0.0);
  float totalWeight = 0.0;
  for (uint i = 0; i < NumSamples; ++i) {
    vec2 u = sampleHammersley(i, NumSamples);
    vec3 H = importanceSampleGGX(u, normal, roughness);

    vec3 L = normalize(reflect(-normal, H));
    float NdotL = clamp(dot(normal, L), 0.0, 1.0);
    float NdotH = clamp(dot(normal, H), 0.0, 1.0);

    if (NdotL > 0.0) {
      float a = NdotH * alpha;
      float k = alpha / (1.0 - NdotH * NdotH + a * a);
      float ggx = k * k / Pi;
      float pdf = ggx / 4.0;

      float mipLevel =
          0.5 * log2(6.0 * mipWidth * mipWidth / (float(NumSamples) * pdf));
      specular += textureLod(uInputTexture, L, mipLevel).rgb * NdotL;
      totalWeight += NdotL;
    }
  }

  if (totalWeight == 0.0) {
    totalWeight = float(NumSamples);
  }

  specular /= totalWeight;

  imageStore(uOutputTexture, globalId, vec4(specular, 1.0));
}
