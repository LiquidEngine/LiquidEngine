name: Pull Request Checks

on:
  pull_request:
    branches: [main]

jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install clang-format
      - name: Verify Clang Format
        run: ./scripts/clang-format-all.sh 14 verify

  fetch-dependencies:
    name: Fetch dependencies
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        id: cache-vendor
        with:
          path: ./vendor/archives
          key: fetch-dependencies
      - name: Fetch dependencies
        run: |
          python3 project.py --no-build
      - name: Store dependencies as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dependencies
          path: ./vendor/archives

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-22.04
    needs: fetch-dependencies
    steps:
      - name: Install dependencies
        run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list http://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
          sudo apt-get clean
          sudo apt-get update
          sudo apt-get install vulkan-sdk xorg-dev libx11-dev clang-tidy

      - uses: actions/checkout@v2

      - uses: actions/cache@v3
        id: cache-vendor
        with:
          path: |
            ./vendor
            !./vendor/archives
          key: ${{ runner.os }}-${{ runner.name }}-${{ hashFiles('./project.json') }}

      - name: Download fetched dependencies
        uses: actions/download-artifact@v3
        with:
          name: dependencies
          path: vendor/archives

      - name: Install dependencies and setup project
        run: |
          python3 project.py --no-fetch

      - name: Static Analysis
        run: |
          ./scripts/clang-tidy-all.sh 14

  docs-checker:
    name: Documentation checker
    runs-on: ubuntu-22.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get clean
          sudo apt-get update
          sudo apt-get install doxygen

      - uses: actions/checkout@v2

      - name: Doxygen checks
        run: |
          ./scripts/doxygen-validate.sh

  build-and-test-linux:
    name: Build and test (Linux)
    runs-on: ubuntu-22.04
    needs: fetch-dependencies
    steps:
      - name: Install dependencies
        run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list http://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
          sudo apt-get clean
          sudo apt-get update
          sudo apt-get install vulkan-sdk xorg-dev libx11-dev clang-tidy lcov

      - name: Install premake
        run: |
          wget https://github.com/premake/premake-core/releases/download/v5.0.0-beta2/premake-5.0.0-beta2-linux.tar.gz
          tar xvzf premake-5.0.0-beta2-linux.tar.gz
          chmod +x premake5
          sudo mv premake5 /usr/local/bin/premake5

      - uses: actions/checkout@v2

      - uses: actions/cache@v3
        id: cache-vendor
        with:
          path: |
            ./vendor
            !./vendor/archives
          key: ${{ runner.os }}-${{ runner.name }}-${{ hashFiles('./project.json') }}

      - name: Download fetched dependencies
        uses: actions/download-artifact@v3
        with:
          name: dependencies
          path: vendor/archives

      - name: Install dependencies and setup project
        run: |
          python3 project.py --no-fetch
          premake5 gmake

      - name: Build
        run: |
          make --directory workspace -j$(nproc) config=test

      - name: Test engine
        run: |
          cd workspace/engine-test/bin/Test
          ./QuollEngineTest

      - name: Test editor
        run: |
          cd workspace/editor-test/bin/Test
          ./QuollEditorTest

      - name: Coverage
        run: |
          ./scripts/generate-coverage-report.sh

      - name: Upload to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/report.info
          flags: engine-unit
          verbose: true
          fail_ci_if_error: true

  build-and-test-windows:
    name: Build and test (Windows)
    runs-on: windows-latest
    needs: fetch-dependencies
    env:
      VULKAN_VERSION: 1.3.250.1
    steps:
      - name: Setup premake
        run: |
          Invoke-WebRequest -Uri https://github.com/premake/premake-core/releases/download/v5.0.0-beta2/premake-5.0.0-beta2-windows.zip -OutFile premake.zip
          Expand-Archive -LiteralPath premake.zip -DestinationPath ../premake

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Setup Vulkan SDK
        run: |
          $VulkanSDK = "D:\VulkanSDK\${Env:VULKAN_VERSION}"
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/${Env:VULKAN_VERSION}/windows/VulkanSDK-${Env:VULKAN_VERSION}-Installer.exe" -OutFile VulkanSDK.exe
          .\VulkanSDK.exe --root $VulkanSDK --accept-licenses --default-answer --confirm-command install

          echo "VULKAN_SDK=$VulkanSDK" >> $env:GITHUB_ENV
          echo "$VulkanSDK/Bin" >> $env:GITHUB_PATH

      - uses: actions/checkout@v2

      - uses: actions/cache@v3
        id: cache-vendor
        with:
          path: |
            ./vendor
            !./vendor/archives
          key: ${{ runner.os }}-${{ runner.name }}-${{ hashFiles('./project.json') }}

      - name: Download fetched dependencies
        uses: actions/download-artifact@v3
        with:
          name: dependencies
          path: vendor/archives

      - name: Install dependencies and setup project
        run: |
          python3 project.py --no-fetch
          ../premake/premake5.exe vs2022

      - name: Build
        run: |
          msbuild .\workspace\QuollEngine.sln /p:configuration=Test

      - name: Test engine
        run: |
          cd workspace/engine-test/bin/Test
          ./QuollEngineTest

      - name: Test editor
        run: |
          cd workspace/editor-test/bin/Test
          ./QuollEditorTest
